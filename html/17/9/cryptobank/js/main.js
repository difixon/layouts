// Create Countdown
// Generated by CoffeeScript 1.4.0

/*
countdown is a simple jquery plugin for countdowns

Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
and GPL-3.0 (http://opensource.org/licenses/GPL-3.0) licenses.

@source: http://github.com/rendro/countdown/
@autor: Robert Fleischmann
@version: 1.0.1
*/


(function() {

  (function($) {
    $.countdown = function(el, options) {
      var getDateData,
        _this = this;
      this.el = el;
      this.$el = $(el);
      this.$el.data("countdown", this);
      this.init = function() {
        _this.options = $.extend({}, $.countdown.defaultOptions, options);
        if (_this.options.refresh) {
          _this.interval = setInterval(function() {
            return _this.render();
          }, _this.options.refresh);
        }
        _this.render();
        return _this;
      };
      getDateData = function(endDate) {
        var dateData, diff;
        endDate = Date.parse($.isPlainObject(_this.options.date) ? _this.options.date : new Date(_this.options.date));
        diff = (endDate - Date.parse(new Date)) / 1000;
        if (diff <= 0) {
          diff = 0;
          if (_this.interval) {
            _this.stop();
          }
          _this.options.onEnd.apply(_this);
        }
        dateData = {
          years: 0,
          days: 0,
          hours: 0,
          min: 0,
          sec: 0,
          millisec: 0
        };
        if (diff >= (365.25 * 86400)) {
          dateData.years = Math.floor(diff / (365.25 * 86400));
          diff -= dateData.years * 365.25 * 86400;
        }
        if (diff >= 86400) {
          dateData.days = Math.floor(diff / 86400);
          diff -= dateData.days * 86400;
        }
        if (diff >= 3600) {
          dateData.hours = Math.floor(diff / 3600);
          diff -= dateData.hours * 3600;
        }
        if (diff >= 60) {
          dateData.min = Math.floor(diff / 60);
          diff -= dateData.min * 60;
        }
        dateData.sec = diff;
        return dateData;
      };
      this.leadingZeros = function(num, length) {
        if (length == null) {
          length = 2;
        }
        num = String(num);
        while (num.length < length) {
          num = "0" + num;
        }
        return num;
      };
      this.update = function(newDate) {
        _this.options.date = newDate;
        return _this;
      };
      this.render = function() {
        _this.options.render.apply(_this, [getDateData(_this.options.date)]);
        return _this;
      };
      this.stop = function() {
        if (_this.interval) {
          clearInterval(_this.interval);
        }
        _this.interval = null;
        return _this;
      };
      this.start = function(refresh) {
        if (refresh == null) {
          refresh = _this.options.refresh || $.countdown.defaultOptions.refresh;
        }
        if (_this.interval) {
          clearInterval(_this.interval);
        }
        _this.render();
        _this.options.refresh = refresh;
        _this.interval = setInterval(function() {
          return _this.render();
        }, _this.options.refresh);
        return _this;
      };
      return this.init();
    };
    $.countdown.defaultOptions = {
      date: "June 7, 2087 15:03:25",
      refresh: 1000,
      onEnd: $.noop,
      render: function(date) {
        return $(this.el).html("" + date.years + " years, " + date.days + " days, " + (this.leadingZeros(date.hours)) + " hours, " + (this.leadingZeros(date.min)) + " min and " + (this.leadingZeros(date.sec)) + " sec");
      }
    };
    $.fn.countdown = function(options) {
      return $.each(this, function(i, el) {
        var $el;
        $el = $(el);
        if (!$el.data('countdown')) {
          return $el.data('countdown', new $.countdown(el, options));
        }
      });
    };
    return void 0;
  })(jQuery);

}).call(this);

$( function() {
        //var endDate = "January 01, 2018 00:00:00";
		var current = new Date();
        var endDate = new Date(current.getTime() + 786400000);
		endDate.toLocaleDateString();


        $('.countdown.simple').countdown({ date: endDate });
		
        $('.countdown').countdown({
			
			
          date: endDate,
          render: function(data) {
			  var $days_2 = parseInt(this.leadingZeros(data.days, 2)%10),
			$days_1= parseInt(this.leadingZeros(data.days, 2)/10),
			$hours_2= parseInt(this.leadingZeros(data.hours, 2)%10),
			$hours_1= parseInt(this.leadingZeros(data.hours, 2)/10),
			$min_2= parseInt(this.leadingZeros(data.min, 2)%10),
			$min_1= parseInt(this.leadingZeros(data.min, 2)/10),
			$sec_2= parseInt(this.leadingZeros(data.sec, 2)%10),
			$sec_1= parseInt(this.leadingZeros(data.sec, 2)/10);
            $(this.el).html("<div class='bloc-time days'><div class='figure days days-1'><span class='top'>" + $days_1 + "</span><span class='top-back'><span>"+ $days_1 +" </span></span><span class='bottom'>" + $days_1 +" </span><span class='bottom-back'><span>"+ $days_1 + "</span></span></div><div class='figure days days-2'><span class='top'>" + $days_2 +" </span><span class='top-back'><span>"+ $days_2 +" </span></span><span class='bottom'>" + $days_2 +" </span><span class='bottom-back'><span>"+ $days_2 + "</span></span></div><span class='count-title'>Days</span></div><div class='bloc-time hours'><div class='figure hours hours-1'><span class='top'>" + $hours_1 +" </span><span class='top-back'><span>"+ $hours_1 +" </span></span><span class='bottom'>" + $hours_1 +" </span><span class='bottom-back'><span>"+ $hours_1 + "</span></span></div><div class='figure hours hours-2'><span class='top'>" + $hours_2 +" </span><span class='top-back'><span>"+ $hours_2 +" </span></span><span class='bottom'>" + $hours_2 +" </span><span class='bottom-back'><span>"+ $hours_2 + "</span></span></div><span class='count-title'>Hours</span></div><div class='bloc-time min'><div class='figure min min-1'><span class='top'>" + $min_1 +" </span><span class='top-back'><span>"+ $min_1 +" </span></span><span class='bottom'>" + $min_1 +" </span><span class='bottom-back'><span>"+ $min_1 + "</span></span></div><div class='figure min min-2'><span class='top'>" + $min_2 +" </span><span class='top-back'><span>"+ $min_2 +" </span></span><span class='bottom'>" + $min_2 +" </span><span class='bottom-back'><span>"+ $min_2 + "</span></span></div><span class='count-title'>Minutes</span></div><div class='bloc-time sec'><div class='figure sec sec-1'><span class='top'>" + $sec_1 +" </span><span class='top-back'><span>"+ $sec_1 +" </span></span><span class='bottom'>" + $sec_1 +" </span><span class='bottom-back'><span>"+ $sec_1 + "</span></span></div><div class='figure sec sec-2'><span class='top'>" + $sec_2 +" </span><span class='top-back'><span>"+ $sec_2 +" </span></span><span class='bottom'>" + $sec_2 +" </span><span class='bottom-back'><span>"+ $sec_2 + "</span></span></div><span class='count-title'>Seconds</span></div>");
          }
        });

        $('.countdown.callback').countdown({
          date: +(new Date) + 10000,
          render: function(data) {
            $(this.el).text(this.leadingZeros(data.sec, 2) + " sec");
          },
          onEnd: function() {
            $(this.el).addClass('ended');
          }
        }).on("click", function() {
          $(this).removeClass('ended').data('countdown').update(+(new Date) + 10000).start();
        });
		
		
		
      });
$(document).ready(function () {
   //initialize swiper when document ready
   var mySwiper = new Swiper ('.swiper-container', {
     // Optional parameters
     nextButton: '.swiper-button-next',
     prevButton: '.swiper-button-prev',
     slidesPerView: 'auto',
     centeredSlides: true,
     paginationClickable: true,
     loop: true
   })
   var mySwiper1 = new Swiper ('.swiper-container1', {
     // Optional parameters
     pagination: '.swiper-pagination',
     nextButton: '.swiper-button-next1',
     prevButton: '.swiper-button-prev1',
     slidesPerView: 'auto',
     centeredSlides: true,
     paginationClickable: true,
     loop: true
   })
 });